var assert = require('assert'),
    TdsBuilder = require('../lib/tds.js').TdsBuilder;

/*************************************************************
addHeaderPacket
*************************************************************/

var builder = new TdsBuilder();

// Check if addHeaderPacket has argument
assert.throws(function() {
    builder.addHeaderPacket();
});


// Check if addHeaderPacket works correctly
builder = new TdsBuilder();
builder.addHeaderPacket(0x12);
assert.equal(builder.offset, 8);
assert.equal(builder.buffer[0], 0x12);








/*************************************************************
addData
*************************************************************/
// Check if arguments is valid
builder = new TdsBuilder();
assert.throws(function() { builder.addData(); });
assert.throws(function() { builder.addData(null); });
assert.throws(function() { builder.addData(0); });

// check if addToken works correctly
builder = new TdsBuilder();
builder.addData([1, 2, 3]);
assert.equal(builder.offset, 11);
//assert.equal(builder.data[0].length, 3);



/*************************************************************
addPacketData
*************************************************************/
// Check if arguments is valid
builder = new TdsBuilder();
assert.throws(function() { builder.addPacketData(); });


// check if addToken works correctly
builder = new TdsBuilder();
builder.addPacketData([1, 2, 3]);
assert.equal(builder.packetData.length, 1);
assert.equal(builder.packetData[0].length, 4); //[ data , offset, endian, encoding ]
assert.equal(builder.packetData[0][0].length, 3); // [1, 2, 3]
assert.equal(builder.packetData[0][1], 8);

//assert.equal(builder.data[0].length, 3);



/*************************************************************
toBuffer
*************************************************************/
builder = new TdsBuilder();
builder.addHeaderPacket(0x12);
assert.equal(builder.toBuffer().length, 8 /*header */);

builder = new TdsBuilder();
builder.addData([0, 1, 2, 3, 4, 5, 6, 7]);
assert.equal(builder.toBuffer().length, 8 /*header */
                                      + 8 /*data*/);

builder = new TdsBuilder();
builder.addPacketData([1, 2, 3, 4, 5, 6]);
assert.equal(builder.toBuffer().length, 8 /*header */
                                      + 2 /*offset byte*/ + 2 /*length byte*/
                                      + 6 /*token data*/);
builder = new TdsBuilder();
builder.addHeaderPacket(0x12);
builder.addPacketData([1, 2, 3, 4, 5, 6]);
builder.addPacketData([9, 9]);
assert.equal(builder.toBuffer().length, 8 /*header */
                                      + 4 /*token 1*/
                                      + 4 /*token 2*/

                                      + 6 /*token 1 data*/
                                      + 2 /*token 2 data*/);






/*************************************************************
HandshakeRequest
*************************************************************/

// Check if Handshake is valid
assert.equal(TdsBuilder.HandshakeRequest().length, 47); // Pre-login
assert.equal(TdsBuilder.HandshakeRequest()[0], 0x12); // 0x12 = 18

assert.equal(TdsBuilder.HandshakeRequest(useMars = 1)[32], 1); // useMars
assert.equal(TdsBuilder.HandshakeRequest()[33], 0xFF); // Terminator



/*************************************************************
HandshakeResponse
*************************************************************/
// Check if HandshakeResponse parse a invalid buffer
var invalidBuffer = new Buffer([
    0x12, 0x01, 0x00, 0x2F, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20,
    0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
    0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00,
    0x01, 0xFF, 0x0A, 0x32, 0x06, 0x40, 0x00, 0x00,
    0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
]);
assert.throws(function() { TdsBuilder.HandshakeResponse(invalidBuffer); });


// Check if HandshakeResponse parse the version that server returns
var buffer = new Buffer([
    0x04, 0x01, 0x00, 0x2F, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20,
    0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
    0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00,
    0x01, 0xFF, 0x0A, 0x32, 0x06, 0x40, 0x00, 0x00,
    0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
]);

assert.equal(TdsBuilder.HandshakeResponse(buffer).Version.Major, 10);
assert.equal(TdsBuilder.HandshakeResponse(buffer).Version.Minor, 50);
assert.equal(TdsBuilder.HandshakeResponse(buffer).Version.Revision, 1600);

/*

http://msdn.microsoft.com/en-us/library/dd358344(v=PROT.13).aspx

*/
var expected = new Buffer([
    0x10, 0x01, 0x00, 0x90, 0x00, 0x00, 0x01, 0x00,
    0x88, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0A, 0x73,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE0, 0x03, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00,
    0x09, 0x04, 0x00, 0x00, 0x5E, 0x00, 0x08, 0x00,
    0x6E, 0x00, 0x02, 0x00, 0x72, 0x00, 0x00, 0x00,
    0x72, 0x00, 0x07, 0x00, 0x80, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x04, 0x00,
    0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
    0x00, 0x50, 0x8B, 0xE2, 0xB7, 0x8F, 0x88, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00,
    0x6B, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00,
    0x6F, 0x00, 0x76, 0x00, 0x31, 0x00, 0x73, 0x00,
    0x61, 0x00, 0x4F, 0x00, 0x53, 0x00, 0x51, 0x00,
    0x4C, 0x00, 0x2D, 0x00, 0x33, 0x00, 0x32, 0x00,
    0x4F, 0x00, 0x44, 0x00, 0x42, 0x00, 0x43, 0x00
]);
var atual = TdsBuilder.LoginRequest("sa", "", "", "skostov1", "OSQL-32");

assert.equal(atual.length, expected.length);
for (var i = 0; i < expected.length; i++) if (expected[i] !== atual[i]) assert.fail(atual[i], expected[i], "i = " + i);
assert.equal(atual.inspect(), expected.inspect());





/*
http://msdn.microsoft.com/en-us/library/dd303700(v=PROT.13).aspx

*/

var buffer = new Buffer([
    0x04, 0x01, 0x01, 0x61, 0x00, 0x00, 0x01, 0x00, 0xE3, 0x1B, 0x00, 0x01, 0x06, 0x6D, 0x00, 0x61,
    0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x06, 0x6D, 0x00, 0x61, 0x00, 0x73, 0x00,
    0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0xAB, 0x58, 0x00, 0x45, 0x16, 0x00, 0x00, 0x02, 0x00, 0x25,
    0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20,
    0x00, 0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65,
    0x00, 0x20, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74,
    0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x27, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x73,
    0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x27, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xE3, 0x08, 0x00, 0x07, 0x05, 0x09, 0x04, 0xD0, 0x00, 0x34, 0x00, 0xE3, 0x17, 0x00, 0x02,
    0x0A, 0x75, 0x00, 0x73, 0x00, 0x5F, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x69,
    0x00, 0x73, 0x00, 0x68, 0x00, 0x00, 0xE3, 0x13, 0x00, 0x04, 0x04, 0x34, 0x00, 0x30, 0x00, 0x39,
    0x00, 0x36, 0x00, 0x04, 0x34, 0x00, 0x30, 0x00, 0x39, 0x00, 0x36, 0x00, 0xAB, 0x5C, 0x00, 0x47,
    0x16, 0x00, 0x00, 0x01, 0x00, 0x27, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67,
    0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x75,
    0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x73, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74,
    0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x75,
    0x00, 0x73, 0x00, 0x5F, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73,
    0x00, 0x68, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAD, 0x36, 0x00, 0x01, 0x72,
    0x09, 0x00, 0x02, 0x16, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00,
    0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x51, 0x00, 0x4C, 0x00, 0x20, 0x00,
    0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00
]);

assert.equal(TdsBuilder.LoginResponse(buffer).envchange, "");
